---
import Layout from '../layouts/Layout.astro';
import LitWrapper from '../components/lit-wrapper.astro';
import type { Message } from '../logic/ai3.ts';
import { mcpServers } from '../logic/get-servers.ts';
import { getTools } from '../logic/get-tools.ts';

let messages: Message[] | undefined = await Astro.session?.get('messages');

const { mcpTools, serversWithFailedConnections } = await getTools(mcpServers, Astro.request.headers.get('x-amzn-oidc-accesstoken') || '');

---

<Layout>

  <link rel="stylesheet" href="https://zurb.github.io/tribute/example/tribute.css" />

  <h1 class="govuk-visually-hidden">Gov AI MCP Client Chat</h1>

  <form method="POST" action="/post-message" enctype="application/x-www-form-urlencoded">
  
    <div class="govuk-grid-row">

      <div class="govuk-grid-column-one-quarter-from-desktop">
        <tool-selector class="tool-selector">
          <div class="govuk-form-group govuk-!-padding-3" style="border: 1px solid #b1b4b6;">
            <fieldset class="govuk-fieldset" aria-describedby="servers-hint">
              <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                <h2 class="govuk-heading-s govuk-!-margin-bottom-0">Select plugins</h2>
              </legend>
              <div id="servers-hint" class="govuk-hint">Plugins allow the AI to connect to external sources before giving a response</div>
              <div class="govuk-checkboxes govuk-checkboxes--small govuk-checkboxes" data-module="govuk-checkboxes">
                { mcpServers.map((server) =>
                  <div class="govuk-checkboxes__item govuk-!-margin-top-3">
                    <input class="govuk-checkboxes__input" id={ 'tool-' + server.name } name="servers" type="checkbox" value={ server.name } aria-describedby={'tool-hint-' + server.name } />
                    <label class="govuk-label govuk-checkboxes__label govuk-!-padding-right-0" for={ 'tool-' + server.name }>
                      { server.name }
                      { serversWithFailedConnections.includes(server.name) && 
                        <strong class="govuk-tag govuk-tag--red"><!--<span class="tool-selector__exclamation" aria-hidden="true">&excl;</span> -->Error</strong>
                      }
                    </label>
                    { !serversWithFailedConnections.includes(server.name) && 
                      <div id={'tool-hint-' + server.name } class="tool-selector__tools govuk-hint govuk-checkboxes__hint govuk-!-margin-top-1 govuk-!-padding-0" style="font-size: 1rem;">
                        <details class="govuk-details govuk-!-margin-bottom-0">
                          <summary class="govuk-details__summary">
                            <span class="govuk-details__summary-text govuk-body-s govuk-!-font-weight-bold">Tools</span>
                          </summary>
                          <div class="govuk-details__text">
                            <ul class="govuk-list govuk-!-margin-bottom-0">
                              { mcpTools.filter((tool) => tool.serverName === server.name).map((tool) =>
                                <li class="govuk-body-s govuk-!-margin-top-2">
                                  <strong class="govuk-!-display-block js-tool">{ tool.name }:</strong>
                                  { tool.description }
                                </li>
                              )}
                            </ul>
                          </div>
                        </details>
                      </div>
                    }
                  </div>
                )}
              </div>
            </fieldset>
          </div>
        </tool-selector>
      </div>

      <div class="govuk-grid-column-three-quarters-from-desktop">

        <h2 class="govuk-visually-hidden">Messages</h2>

        <div id="message-container">

          { messages?.map((message) =>
            <LitWrapper>
              <message-box type={ message.type } content={ message.response.content } tool-calls={ JSON.stringify(message.response.tool_calls) }></message-box>
            </LitWrapper>
          )}

        </div>

        <div class="prompt-box govuk-!-padding-3">
          <message-input>
            <label class="govuk-label govuk-label--s" for="prompt">Ask anything</label>
            <div id="prompt-hint" class="govuk-hint govuk-!-font-size-16">
              AI can make mistakes - check before using its output. Type @ to reference specific tools.
            </div>
            <id id="autocomplete-assistive-hint" style="display: none;">
              When autocomplete results are available use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.
            </id>
            <textarea class="govuk-textarea govuk-!-margin-bottom-3 prompt-box__textarea" id="prompt" name="prompt" rows="3" required aria-describedby="prompt-hint autocomplete-assistive-hint"></textarea>
          </message-input>

          <div class="govuk-button-group govuk-!-margin-bottom-1">
            <button class="govuk-button govuk-!-margin-bottom-0">Send</button>
            <a class="govuk-link govuk-!-font-size-16 govuk-!-margin-bottom-0" href="/clear-session">Clear session</a>
          </div>
        </div>

      </div>
    </div>

  </form>


  <script>
    
    import type { MessageInput } from '../components/message-input.mjs'

    const textArea = document.querySelector('message-input') as MessageInput;
    const form = document.querySelector('form') as HTMLFormElement
    let container = document.querySelector('#message-container') as HTMLElement
    form.addEventListener('submit', (evt) => {
      evt.preventDefault()
      const formData = new URLSearchParams(new FormData(form)).toString()

      // set up new message
      let messageBoxUser = document.createElement('message-box')
      messageBoxUser.setAttribute('type', 'user')
      messageBoxUser.setAttribute('content', textArea.getValue().replace(/"/g, '&quot;'))
      container.appendChild(messageBoxUser)

      let messageBoxLLM = document.createElement('message-box')
      messageBoxLLM.setAttribute('type', 'llm')
      container.appendChild(messageBoxLLM)
      
      // send prompt
      fetch("/post-message", {
        method: "POST",
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: formData
      });

      textArea.reset()

    })

  </script>

  <script>
    import '../components/loading-message.mjs'
    import '../components/markdown-converter.mjs'
    import '../components/message-box.mjs'
    import '../components/message-input.mjs'
    import '../components/tool-info.mjs'
    import '../components/tool-selector.ts'
  </script>

</Layout>


<style is:global>

  /* Tribute autocomplete */
  body {
    position: relative;
  }
  .tribute-container {
    font-family: 'Inter', sans-serif;
  }


  .tool-selector {
    label {
      max-width: none;
    }
  }
  .tool-selector__tools {
    summary::before {
      color: #505a5f;
      left: 3px;
    };
    summary span {
      color: #505a5f;
      position: relative; top: -2px;
    }
    li {
      color: #505a5f;
      word-wrap: break-word;
    }
  }
  .tool-selector__exclamation {
    align-items: center;
    border: 1px solid;
    border-radius: 100%;
    display: inline-flex;
    font-size: 14px;
    font-weight: bold;
    height: 12px;
    justify-content: center;
    padding: 3px;
    width: 12px;
  }


  #loading[tabindex="-1"]:focus-visible {
    border-radius: 0.5rem;
    outline: 1px solid var(--iai-pink);
  }

  .message-box {
    border: 1px solid #b1b4b6;
    border-radius: 0.5rem;
    margin-bottom: 1.25rem;
    padding: 1rem;
  }
  .message-box--user {
    background-color: #fee7f4;
    border-color: var(--iai-pink);
    margin-right: 2.75rem;
  }
  .message-box--llm {
    margin-left: 2.75rem;
    position: relative;
  }
  .message-box--llm::before {
    align-items: center;
    background-color: var(--iai-pink);
    border-radius: 100%;
    color: #fff;
    content: 'AI';
    display: flex;
    font-family: Inter, Arial, sans-serif;
    height: 2rem;
    justify-content: center;
    left: -2.75rem;
    position: absolute;
    top: 0.25rem;
    width: 2rem;
  }
  .message-box:focus-visible {
    border: 2px solid #c50878;
    outline: none;
  }
  .message-box pre {
    overflow: scroll;
  }
  .message-box p:last-child {
    margin-bottom: 0.25rem;
  }
  .message-box li {
    margin-top: 1rem;
  }

  .prompt-box {
    background-color: #f3f2f1;
    border: 1px solid #b1b4b6;
  }
  .prompt-box__textarea {
    min-height: 86px;
  }

  .loading-ellipsis span {
    animation-duration: 1.5s;
    animation-iteration-count: infinite;
    margin: 0 -2px;
  }
  .loading-ellipsis span:nth-of-type(1) {
    animation-name: rb-ellipsis-1;
  }
  .loading-ellipsis span:nth-of-type(2) {
    animation-name: rb-ellipsis-2;
  }
  .loading-ellipsis span:nth-of-type(3) {
    animation-name: rb-ellipsis-3;
  }
  @keyframes rb-ellipsis-1 {
    0% {
      opacity: 0;
    }
    24% {
      opacity: 0;
    }
    25% {
      opacity: 1;
    }
  }
  @keyframes rb-ellipsis-2 {
    0% {
      opacity: 0;
    }
    49% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
  }
  @keyframes rb-ellipsis-3 {
    0% {
      opacity: 0;
    }
    74% {
      opacity: 0;
    }
    75% {
      opacity: 1;
    }
  }

</style>
