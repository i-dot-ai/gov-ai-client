---
import Layout from '../layouts/Layout.astro';
import Tools from '../components/tools.astro';
import LitWrapper from '../components/lit-wrapper.astro';
import type { Message } from '../logic/ai-sdk.ts';


let messages: Message[] | undefined = await Astro.session?.get('messages');

---

<Layout>

  <link rel="stylesheet" href="https://zurb.github.io/tribute/example/tribute.css" />

  <h1 class="govuk-visually-hidden">Gov AI MCP Client Chat</h1>

  <form method="POST" action="/post-message" enctype="application/x-www-form-urlencoded">
  
    <div class="govuk-grid-row">

      <div class="govuk-grid-column-three-quarters-from-desktop">

        <h2 class="govuk-visually-hidden">Messages</h2>

        <div id="message-container">

          <LitWrapper>
            <message-box type="llm" content=`
              <h3 class="govuk-heading-s">Welcome to GovAI Client</h3> 
              I am a dedicated chat assistant for securely connecting to external plugins. Make selections via the plugins panel and run a query. Each plugin may contain multiple tools. Please let me know how I can assist you today!
            `></message-box>
          </LitWrapper>

          { messages?.map((message) =>
            <LitWrapper>
              <message-box type={ message.type } content={ message.response.content } tool-calls={ JSON.stringify(message.response.tool_calls) }></message-box>
            </LitWrapper>
          )}

        </div>

        <div class="prompt-box govuk-!-padding-3">
          <message-input>
            <label class="govuk-label govuk-label--s" for="prompt">Ask anything</label>
            <div id="prompt-hint" class="govuk-hint govuk-!-font-size-16">
              AI can make mistakes - check before using its output. Type @ to reference specific tools.
            </div>
            <id id="autocomplete-assistive-hint" style="display: none;">
              When autocomplete results are available use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.
            </id>
            <textarea class="govuk-textarea govuk-!-margin-bottom-3 prompt-box__textarea" id="prompt" name="prompt" rows="3" required aria-describedby="prompt-hint autocomplete-assistive-hint"></textarea>
          </message-input>

          <div class="govuk-button-group govuk-!-margin-bottom-1">
            <button class="govuk-button govuk-!-margin-bottom-0 plausible-event-name=Send+Prompt">Send</button>
            <a class="govuk-link govuk-!-font-size-16 govuk-!-margin-bottom-0 plausible-event-name=New+Chat" href="/clear-session">Start a new chat</a>
          </div>

        </div>

      </div>

      <div class="govuk-grid-column-one-quarter-from-desktop">
        <tool-selector class="tool-selector">
          <div class="govuk-form-group govuk-!-padding-3 govuk-!-margin-bottom-0" style="border: 1px solid #b1b4b6;">
            <fieldset class="govuk-fieldset" aria-describedby="servers-hint">
              <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                <h2 class="govuk-heading-s govuk-!-margin-bottom-0">Select plugins</h2>
              </legend>
              <p id="servers-hint" class="govuk-body-s govuk-!-margin-bottom-3" style="color: #505a5f;">Plugins allow the AI to connect to external sources before giving a response</p>
              <div class="govuk-checkboxes govuk-checkboxes--small govuk-checkboxes" data-module="govuk-checkboxes">
                <Tools />
              </div>

              <div class="govuk-form-group govuk-!-margin-top-4">
                <label class="govuk-label govuk-label--s" for="provider">AI Provider</label>
                <select class="govuk-select" id="provider" name="provider">
                  <option value="azure">Azure OpenAI</option>
                  <option value="anthropic">Anthropic Claude</option>
                </select>
              </div>
            </fieldset>
          </div>
        </tool-selector>
      </div>

    </div>

  </form>


  <script>
    
    import type { MessageInput } from '../components/message-input.mjs'

    const textArea = document.querySelector('message-input') as MessageInput;
    const form = document.querySelector('form') as HTMLFormElement
    const providerSelect = document.querySelector('#provider') as HTMLSelectElement
    let container = document.querySelector('#message-container') as HTMLElement
    
    // Store messages in memory for the session
    let sessionMessages: Array<{type: 'user' | 'llm', response: {content: string, tool_calls: any[]}}> = []
    
    form.addEventListener('submit', async (evt) => {
      evt.preventDefault()

      const formData = new FormData(form)
      const userPrompt = textArea.getValue()
      const selectedServers = formData.getAll('servers')
      const provider = providerSelect.value

      // Add user message to session
      const userMessage = {
        type: 'user' as const,
        response: {
          content: userPrompt,
          tool_calls: []
        }
      }
      sessionMessages.push(userMessage)

      // set up new message elements
      let messageBoxUser = document.createElement('message-box')
      messageBoxUser.setAttribute('type', 'user')
      messageBoxUser.setAttribute('content', userPrompt.replace(/"/g, '&quot;'))
      container.appendChild(messageBoxUser)

      let messageBoxLLM = document.createElement('message-box')
      messageBoxLLM.setAttribute('type', 'llm')
      container.appendChild(messageBoxLLM)
      
      // Send the request and handle streaming response
      try {
        const response = await fetch("/post-message", {
          method: "POST",
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            messages: sessionMessages,
            selectedServers,
            authToken: null, // Will be set by middleware if needed
            provider
          })
        })

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`)
        }

        // Handle AI SDK data stream protocol
        const reader = response.body?.getReader()
        const decoder = new TextDecoder()
        let llmContent = ''
        let toolCalls: any[] = []

        if (reader) {
          while (true) {
            const { done, value } = await reader.read()
            if (done) {
              // Stream is complete
              break
            }

            const chunk = decoder.decode(value, { stream: true })
            const lines = chunk.split('\n').filter(line => line.trim())

            for (const line of lines) {
              console.log('Stream line:', line) // Debug log
              if (line.startsWith('0:')) {
                // Text content from AI SDK (format: 0:"text content")
                try {
                  const content = JSON.parse(line.substring(2))
                  if (content) {
                    llmContent += content
                    messageBoxLLM.setAttribute('content', llmContent)
                  }
                } catch (e) {
                  console.warn('Error parsing text content:', e)
                }
              } else if (line.startsWith('9:')) {
                // Tool call part (format: 9:{"toolCallId":"call-123","toolName":"my-tool","args":{"some":"argument"}})
                try {
                  const data = JSON.parse(line.substring(2))
                  if (data.toolCallId && data.toolName) {
                    toolCalls.push({
                      name: data.toolName,
                      args: data.args
                    })
                    messageBoxLLM.setAttribute('tool-calls', JSON.stringify(toolCalls))
                  }
                } catch (e) {
                  console.warn('Error parsing tool call data:', e)
                }
              } else if (line.startsWith('d:')) {
                // Stream finished (format: d:{"finishReason":"stop","usage":{"promptTokens":10,"completionTokens":20}})
                console.log('Stream finished detected!') // Debug log
                break
              }
            }
          }
        }

        // Add LLM response to session
        sessionMessages.push({
          type: 'llm',
          response: {
            content: llmContent,
            tool_calls: toolCalls
          }
        })

      } catch (error) {
        console.error('Error sending message:', error)
        messageBoxLLM.setAttribute('content', 'Sorry, there was an error processing your request.')
      }

      textArea.reset()
    })

  </script>

  <script>
    import '../components/loading-message.mjs'
    import '../components/markdown-converter.mjs'
    import '../components/message-box.mjs'
    import '../components/message-input.mjs'
    import '../components/tool-info.mjs'
    import '../components/tool-selector.ts'
  </script>

</Layout>


<style is:global>

  /* Tribute autocomplete */
  body {
    position: relative;
  }
  .tribute-container {
    font-family: 'Inter', sans-serif;

    li {
      padding: 7px !important;
    }
    li:nth-child(odd) {
      background-color: #f3f2f1;
    }
    li:nth-child(even) {
      background-color: white;
    }
    li.highlight {
      background: var(--iai-pink) !important;
      color: white;
    }
  }

  .govuk-grid-column-one-quarter-from-desktop:has(.tool-selector) {
    position: sticky;
    top: 30px;
  }
  .tool-selector {
    display: block;
    margin-top: 20px;
    label {
      max-width: none;
    }
  }
  @media (min-width: 769px) {
    .tool-selector {
      margin-top: 0;
    }
  }

  #loading[tabindex="-1"]:focus-visible {
    border-radius: 0.5rem;
    outline: 1px solid var(--iai-pink);
  }

  .message-box {
    border: 1px solid #b1b4b6;
    border-radius: 0.5rem;
    margin-bottom: 1.25rem;
    padding: 1rem;
    * {
      word-wrap: break-word;
    }
  }
  .message-box--user {
    background-color: #fee7f4;
    border-color: var(--iai-pink);
    margin-right: 2.75rem;
  }
  .message-box--llm {
    margin-left: 2.75rem;
    position: relative;
  }
  .message-box--llm::before {
    align-items: center;
    background-color: var(--iai-pink);
    border-radius: 100%;
    color: #fff;
    content: 'AI';
    display: flex;
    font-family: Inter, Arial, sans-serif;
    height: 2rem;
    justify-content: center;
    left: -2.75rem;
    position: absolute;
    top: 0.25rem;
    width: 2rem;
  }
  .message-box:focus-visible {
    border: 2px solid #c50878;
    outline: none;
  }
  .message-box pre {
    overflow: scroll;
  }
  .message-box p:last-child {
    margin-bottom: 0.25rem;
  }
  .message-box li {
    margin-top: 1rem;
  }
  .message-box table {
    border-collapse: collapse;
  }
  .message-box td,.message-box th {
    border: 1px solid #b1b4b6;
    padding: 5px;
    text-align: left;
  }

  .prompt-box {
    background-color: #f3f2f1;
    border: 1px solid #b1b4b6;
  }
  .prompt-box__textarea {
    min-height: 86px;
  }

  .loading-ellipsis span {
    animation-duration: 1.5s;
    animation-iteration-count: infinite;
    margin: 0 -2px;
  }
  .loading-ellipsis span:nth-of-type(1) {
    animation-name: rb-ellipsis-1;
  }
  .loading-ellipsis span:nth-of-type(2) {
    animation-name: rb-ellipsis-2;
  }
  .loading-ellipsis span:nth-of-type(3) {
    animation-name: rb-ellipsis-3;
  }
  @keyframes rb-ellipsis-1 {
    0% {
      opacity: 0;
    }
    24% {
      opacity: 0;
    }
    25% {
      opacity: 1;
    }
  }
  @keyframes rb-ellipsis-2 {
    0% {
      opacity: 0;
    }
    49% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
  }
  @keyframes rb-ellipsis-3 {
    0% {
      opacity: 0;
    }
    74% {
      opacity: 0;
    }
    75% {
      opacity: 1;
    }
  }

  message-box copy-button {
    display: block;
  }
  message-box:first-child copy-button {
    display: none;
  }

</style>
